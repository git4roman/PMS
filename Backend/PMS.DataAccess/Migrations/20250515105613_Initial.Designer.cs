// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PMS.DataAccess.Data;

#nullable disable

namespace PMS.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250515105613_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PMS.Core.CategoryFeatures.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_name");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Seeds and plants for agriculture and gardening.",
                            Guid = new Guid("e1168fb4-6a6e-4fe8-9b0e-65282fbfb341"),
                            ImageUrl = "images/categories/crops.jpg",
                            Name = "Crops"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Essential tools for planting, digging, and maintaining your garden.",
                            Guid = new Guid("a4f255b0-2315-4dee-b4b8-4dacf86457fe"),
                            ImageUrl = "images/categories/tools.jpg",
                            Name = "Tools"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Fertilizers, pesticides, and insecticides for healthy plant growth.",
                            Guid = new Guid("af7963ee-4124-4e93-b85e-b42b97750ded"),
                            ImageUrl = "images/categories/chemicals.jpg",
                            Name = "Chemicals"
                        });
                });

            modelBuilder.Entity("PMS.Core.CustomerFeatures.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("CustomerEntity");
                });

            modelBuilder.Entity("PMS.Core.DommyTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DommyTables");
                });

            modelBuilder.Entity("PMS.Core.OderFeatures.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DelieveryAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(16, 41, 12, 920).Add(TimeSpan.FromTicks(9178)),
                            CustomerId = 101,
                            DelieveryAddress = "123 Maple Street, Springfield",
                            Description = "Grocery order for weekly supplies",
                            Guid = new Guid("fb3eb877-677b-43ae-b047-dc70731036d8"),
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(16, 41, 12, 920).Add(TimeSpan.FromTicks(9181)),
                            CustomerId = 102,
                            DelieveryAddress = "456 Oak Avenue, Rivertown",
                            Description = "Electronics purchase",
                            Guid = new Guid("49e0eea5-e1ed-4d37-aa9c-77e8fd783f1f"),
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(16, 41, 12, 920).Add(TimeSpan.FromTicks(9183)),
                            CustomerId = 103,
                            DelieveryAddress = "789 Pine Road, Hillview",
                            Description = "Clothing order for summer collection",
                            Guid = new Guid("229a5c6b-f928-4a4d-ae51-289901553959"),
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(16, 41, 12, 920).Add(TimeSpan.FromTicks(9188)),
                            CustomerId = 104,
                            DelieveryAddress = "321 Cedar Lane, Lakeside",
                            Description = "Furniture delivery",
                            Guid = new Guid("7bef04f2-634f-4627-9600-5dc118bdb03f"),
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(16, 41, 12, 920).Add(TimeSpan.FromTicks(9190)),
                            CustomerId = 105,
                            DelieveryAddress = "654 Birch Street, Sunnyvale",
                            Description = "Cancelled book order",
                            Guid = new Guid("3494126d-cd38-4a8a-83b7-17b35d013f1c"),
                            OrderStatus = "Pending"
                        });
                });

            modelBuilder.Entity("PMS.Core.OrderItemFeatures.OrderItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItemEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Two packets of tomato seeds",
                            Guid = new Guid("7b65c3a9-565d-4dd2-8439-9bb656720f8a"),
                            Name = "Tomato Seeds x2",
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 2,
                            ShippingCharge = 1.00m,
                            TotalPrice = 7.00m,
                            UnitPrice = 3.00m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Garden hand tool",
                            Guid = new Guid("50748637-4057-42c9-938a-eca5a5f1b2ab"),
                            Name = "Hand Trowel",
                            OrderId = 1,
                            ProductId = 4,
                            Quantity = 1,
                            ShippingCharge = 1.00m,
                            TotalPrice = 8.00m,
                            UnitPrice = 7.00m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Organic pesticide",
                            Guid = new Guid("7fdcf96e-af72-42e2-aad2-35b50f0d2e8c"),
                            Name = "Neem Oil Bottle",
                            OrderId = 2,
                            ProductId = 7,
                            Quantity = 1,
                            ShippingCharge = 1.00m,
                            TotalPrice = 9.00m,
                            UnitPrice = 8.00m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Set of 3 spinach plants",
                            Guid = new Guid("7e793437-b381-45dc-ac20-3e9bc8c46903"),
                            Name = "Spinach Plant x3",
                            OrderId = 3,
                            ProductId = 2,
                            Quantity = 3,
                            ShippingCharge = 1.00m,
                            TotalPrice = 16.00m,
                            UnitPrice = 5.00m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Sharp pruning shears",
                            Guid = new Guid("db343ed9-41e5-4e4c-9aea-0b5e3db6cdec"),
                            Name = "Pruning Shears",
                            OrderId = 4,
                            ProductId = 5,
                            Quantity = 1,
                            ShippingCharge = 1.00m,
                            TotalPrice = 11.00m,
                            UnitPrice = 10.00m
                        });
                });

            modelBuilder.Entity("PMS.Core.ProductFeatures.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<TimeSpan>("CreatedTime")
                        .HasColumnType("time")
                        .HasColumnName("created_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("product_name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.Property<TimeSpan>("UpdatedTime")
                        .HasColumnType("time")
                        .HasColumnName("updated_time");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(600729209057),
                            Description = "High-yield tomato seeds suitable for home and farm use.",
                            Guid = new Guid("f97d4794-f93a-4d58-88da-b07e4f3ff1c1"),
                            ImageUrl = "images/products/tomato_seeds.jpg",
                            Name = "Tomato Seeds",
                            Price = 0m,
                            Quantity = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(600729209066),
                            Description = "Nutritious leafy vegetable ready for home garden transplant.",
                            Guid = new Guid("196b1c7a-f541-4618-a507-4991bfa27a97"),
                            ImageUrl = "images/products/spinach_plant.jpg",
                            Name = "Spinach Plant",
                            Price = 0m,
                            Quantity = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(600729209068),
                            Description = "Spicy chili seeds ideal for warm climates.",
                            Guid = new Guid("c78f1ebe-9a59-4179-a21d-1d03e4ca3d89"),
                            ImageUrl = "images/products/chili_seeds.jpg",
                            Name = "Chili Seeds",
                            Price = 0m,
                            Quantity = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(600729209070),
                            Description = "Durable tool for digging and planting small plants.",
                            Guid = new Guid("17406890-dcce-4908-bfb7-b887ef1dffd6"),
                            ImageUrl = "images/products/hand_trowel.jpg",
                            Name = "Hand Trowel",
                            Price = 0m,
                            Quantity = 7,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(600729209084),
                            Description = "Sharp blade tool for trimming plants and bushes.",
                            Guid = new Guid("22b2af02-cb91-4a0a-b2ed-8a4a7b45ad2f"),
                            ImageUrl = "images/products/pruning_shears.jpg",
                            Name = "Pruning Shears",
                            Price = 0m,
                            Quantity = 10,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(600729209087),
                            Description = "Lightweight watering can with long spout for even watering.",
                            Guid = new Guid("31d12078-72d1-4788-b4aa-a93d35d0ada9"),
                            ImageUrl = "images/products/watering_can.jpg",
                            Name = "Watering Can",
                            Price = 0m,
                            Quantity = 12,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(600729209089),
                            Description = "Organic pesticide for controlling aphids and mealybugs.",
                            Guid = new Guid("33f8cd70-6b25-49d7-a085-1ac0d0e759bb"),
                            ImageUrl = "images/products/neem_oil.jpg",
                            Name = "Pesticide - Neem Oil",
                            Price = 0m,
                            Quantity = 8,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(600729209091),
                            Description = "Fast-acting insecticide for outdoor crops.",
                            Guid = new Guid("44849150-f135-4976-80ba-cb57740c4506"),
                            ImageUrl = "images/products/cypermethrin.jpg",
                            Name = "Insecticide - Cypermethrin",
                            Price = 0m,
                            Quantity = 10,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(600729209093),
                            Description = "Balanced fertilizer to promote plant growth.",
                            Guid = new Guid("eb747c24-0c46-439b-b73f-7b95c3b213cf"),
                            ImageUrl = "images/products/npk_fertilizer.jpg",
                            Name = "Fertilizer - NPK 20:20:20",
                            Price = 0m,
                            Quantity = 15,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("PMS.Core.UserFeatures.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Butwal",
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(16, 41, 12, 920).Add(TimeSpan.FromTicks(9133)),
                            Email = "admin@admin.com",
                            FirstName = "Ram",
                            LastName = "Thapa",
                            MiddleName = "Bahadur",
                            PasswordHash = "hashedPassword1",
                            PhoneNumber = "9800000000",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Lalitpur",
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(16, 41, 12, 920).Add(TimeSpan.FromTicks(9135)),
                            Email = "sita@example.com",
                            FirstName = "Sita",
                            LastName = "Maharjan",
                            MiddleName = "",
                            PasswordHash = "hashedPassword2",
                            PhoneNumber = "9800000001",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Pokhara",
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(16, 41, 12, 920).Add(TimeSpan.FromTicks(9137)),
                            Email = "kiran@example.com",
                            FirstName = "Kiran",
                            LastName = "Gurung",
                            MiddleName = "Kumar",
                            PasswordHash = "hashedPassword3",
                            PhoneNumber = "9800000002",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Kathmandu",
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(16, 41, 12, 920).Add(TimeSpan.FromTicks(9138)),
                            Email = "anil@example.com",
                            FirstName = "Anil",
                            LastName = "Shrestha",
                            MiddleName = "",
                            PasswordHash = "hashedPassword4",
                            PhoneNumber = "9800000003",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Biratnagar",
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(16, 41, 12, 920).Add(TimeSpan.FromTicks(9140)),
                            Email = "meena@example.com",
                            FirstName = "Meena",
                            LastName = "Tharu",
                            MiddleName = "Devi",
                            PasswordHash = "hashedPassword5",
                            PhoneNumber = "9800000004",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Dharan",
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(16, 41, 12, 920).Add(TimeSpan.FromTicks(9142)),
                            Email = "hari@example.com",
                            FirstName = "Hari",
                            LastName = "Rai",
                            MiddleName = "",
                            PasswordHash = "hashedPassword6",
                            PhoneNumber = "9800000005",
                            Status = "InActive"
                        });
                });

            modelBuilder.Entity("PMS.Core.CustomerFeatures.CustomerEntity", b =>
                {
                    b.HasOne("PMS.Core.OderFeatures.OrderEntity", "Order")
                        .WithOne("CustomerEntity")
                        .HasForeignKey("PMS.Core.CustomerFeatures.CustomerEntity", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.UserFeatures.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS.Core.OrderItemFeatures.OrderItemEntity", b =>
                {
                    b.HasOne("PMS.Core.OderFeatures.OrderEntity", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.ProductFeatures.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PMS.Core.ProductFeatures.ProductEntity", b =>
                {
                    b.HasOne("PMS.Core.CategoryFeatures.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PMS.Core.CategoryFeatures.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PMS.Core.OderFeatures.OrderEntity", b =>
                {
                    b.Navigation("CustomerEntity")
                        .IsRequired();

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
