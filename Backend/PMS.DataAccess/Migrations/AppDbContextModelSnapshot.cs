// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PMS.DataAccess.Data;

#nullable disable

namespace PMS.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PMS.Core.CategoryFeatures.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Seeds and plants for agriculture and gardening.",
                            Guid = new Guid("a584297a-0a3b-4a60-962d-ed8c179d54a2"),
                            ImageUrl = "images/categories/crops.jpg",
                            Name = "Crops"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Essential tools for planting, digging, and maintaining your garden.",
                            Guid = new Guid("f1cdfa86-fdda-4b00-a594-ca9f92686b6c"),
                            ImageUrl = "images/categories/tools.jpg",
                            Name = "Tools"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Fertilizers, pesticides, and insecticides for healthy plant growth.",
                            Guid = new Guid("97c98309-57c7-48c3-b1a2-384d129dc468"),
                            ImageUrl = "images/categories/chemicals.jpg",
                            Name = "Chemicals"
                        });
                });

            modelBuilder.Entity("PMS.Core.CustomerFeatures.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("CustomerEntity");
                });

            modelBuilder.Entity("PMS.Core.DommyTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DommyTables");
                });

            modelBuilder.Entity("PMS.Core.OderFeatures.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DelieveryAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9935)),
                            CustomerId = 101,
                            DelieveryAddress = "123 Maple Street, Springfield",
                            Description = "Grocery order for weekly supplies",
                            Guid = new Guid("e8285d33-3381-4595-8966-209995bf54a5"),
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9937)),
                            CustomerId = 102,
                            DelieveryAddress = "456 Oak Avenue, Rivertown",
                            Description = "Electronics purchase",
                            Guid = new Guid("ff7cf481-0c3e-44ce-b866-2d63590996c1"),
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9939)),
                            CustomerId = 103,
                            DelieveryAddress = "789 Pine Road, Hillview",
                            Description = "Clothing order for summer collection",
                            Guid = new Guid("9392d4e7-d233-48fd-8b62-cc2fb6101831"),
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9943)),
                            CustomerId = 104,
                            DelieveryAddress = "321 Cedar Lane, Lakeside",
                            Description = "Furniture delivery",
                            Guid = new Guid("dff31598-417f-4290-939f-883adc04f6a4"),
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9975)),
                            CustomerId = 105,
                            DelieveryAddress = "654 Birch Street, Sunnyvale",
                            Description = "Cancelled book order",
                            Guid = new Guid("c60d4e68-68a4-435a-b6b4-ac60bd348a07"),
                            OrderStatus = "Pending"
                        });
                });

            modelBuilder.Entity("PMS.Core.OrderItemFeatures.OrderItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItemEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Two packets of tomato seeds",
                            Guid = new Guid("d1be8d42-c2ad-4382-8513-a9fc0dac8bb6"),
                            Name = "Tomato Seeds x2",
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 2,
                            ShippingCharge = 1.00m,
                            TotalPrice = 7.00m,
                            UnitPrice = 3.00m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Garden hand tool",
                            Guid = new Guid("cfceb59a-45e2-4540-8f2c-c968df37cfae"),
                            Name = "Hand Trowel",
                            OrderId = 1,
                            ProductId = 4,
                            Quantity = 1,
                            ShippingCharge = 1.00m,
                            TotalPrice = 8.00m,
                            UnitPrice = 7.00m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Organic pesticide",
                            Guid = new Guid("99161013-9575-4ea0-b931-92a31a67181e"),
                            Name = "Neem Oil Bottle",
                            OrderId = 2,
                            ProductId = 7,
                            Quantity = 1,
                            ShippingCharge = 1.00m,
                            TotalPrice = 9.00m,
                            UnitPrice = 8.00m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Set of 3 spinach plants",
                            Guid = new Guid("2b5135b8-0dbc-430a-a88b-7aa0cdc32c29"),
                            Name = "Spinach Plant x3",
                            OrderId = 3,
                            ProductId = 2,
                            Quantity = 3,
                            ShippingCharge = 1.00m,
                            TotalPrice = 16.00m,
                            UnitPrice = 5.00m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Sharp pruning shears",
                            Guid = new Guid("b955b55b-5e81-490b-9b7c-33464afeb79b"),
                            Name = "Pruning Shears",
                            OrderId = 4,
                            ProductId = 5,
                            Quantity = 1,
                            ShippingCharge = 1.00m,
                            TotalPrice = 11.00m,
                            UnitPrice = 10.00m
                        });
                });

            modelBuilder.Entity("PMS.Core.ProductFeatures.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("UpdatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("UpdatedTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9832)),
                            Description = "High-yield tomato seeds suitable for home and farm use.",
                            Guid = new Guid("27a93a37-439c-408c-bb2b-bccf2092688f"),
                            ImageUrl = "images/products/tomato_seeds.jpg",
                            Name = "Tomato Seeds",
                            Quantity = 3,
                            Status = "Active",
                            UpdatedDate = new DateOnly(1, 1, 1),
                            UpdatedTime = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9840)),
                            Description = "Nutritious leafy vegetable ready for home garden transplant.",
                            Guid = new Guid("9bc80bb1-9d10-450c-8ad7-0201e0b93008"),
                            ImageUrl = "images/products/spinach_plant.jpg",
                            Name = "Spinach Plant",
                            Quantity = 5,
                            Status = "Active",
                            UpdatedDate = new DateOnly(1, 1, 1),
                            UpdatedTime = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9841)),
                            Description = "Spicy chili seeds ideal for warm climates.",
                            Guid = new Guid("43c5667b-e99f-49a6-a0c5-7c0be92e84b1"),
                            ImageUrl = "images/products/chili_seeds.jpg",
                            Name = "Chili Seeds",
                            Quantity = 2,
                            Status = "Active",
                            UpdatedDate = new DateOnly(1, 1, 1),
                            UpdatedTime = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9843)),
                            Description = "Durable tool for digging and planting small plants.",
                            Guid = new Guid("ac283f78-0126-4ef6-aa4e-3a1edb379677"),
                            ImageUrl = "images/products/hand_trowel.jpg",
                            Name = "Hand Trowel",
                            Quantity = 7,
                            Status = "Active",
                            UpdatedDate = new DateOnly(1, 1, 1),
                            UpdatedTime = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9858)),
                            Description = "Sharp blade tool for trimming plants and bushes.",
                            Guid = new Guid("418be461-0180-4358-8554-50d0faf51531"),
                            ImageUrl = "images/products/pruning_shears.jpg",
                            Name = "Pruning Shears",
                            Quantity = 10,
                            Status = "Active",
                            UpdatedDate = new DateOnly(1, 1, 1),
                            UpdatedTime = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9860)),
                            Description = "Lightweight watering can with long spout for even watering.",
                            Guid = new Guid("d65525fd-afd3-42b6-8b82-bbac4c22a9b9"),
                            ImageUrl = "images/products/watering_can.jpg",
                            Name = "Watering Can",
                            Quantity = 12,
                            Status = "Active",
                            UpdatedDate = new DateOnly(1, 1, 1),
                            UpdatedTime = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9862)),
                            Description = "Organic pesticide for controlling aphids and mealybugs.",
                            Guid = new Guid("795fdbc0-a971-461d-93dc-af4a7850eca1"),
                            ImageUrl = "images/products/neem_oil.jpg",
                            Name = "Pesticide - Neem Oil",
                            Quantity = 8,
                            Status = "Active",
                            UpdatedDate = new DateOnly(1, 1, 1),
                            UpdatedTime = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9864)),
                            Description = "Fast-acting insecticide for outdoor crops.",
                            Guid = new Guid("999e3527-4c1c-40ad-bd13-acc18658edfc"),
                            ImageUrl = "images/products/cypermethrin.jpg",
                            Name = "Insecticide - Cypermethrin",
                            Quantity = 10,
                            Status = "Active",
                            UpdatedDate = new DateOnly(1, 1, 1),
                            UpdatedTime = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9866)),
                            Description = "Balanced fertilizer to promote plant growth.",
                            Guid = new Guid("a79c5564-4081-423d-8981-d46520a041ab"),
                            ImageUrl = "images/products/npk_fertilizer.jpg",
                            Name = "Fertilizer - NPK 20:20:20",
                            Quantity = 15,
                            Status = "Active",
                            UpdatedDate = new DateOnly(1, 1, 1),
                            UpdatedTime = new TimeOnly(0, 0, 0)
                        });
                });

            modelBuilder.Entity("PMS.Core.UserFeatures.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Butwal",
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9901)),
                            Email = "admin@admin.com",
                            FirstName = "Ram",
                            LastName = "Thapa",
                            MiddleName = "Bahadur",
                            PasswordHash = "hashedPassword1",
                            PhoneNumber = "9800000000",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Lalitpur",
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9903)),
                            Email = "sita@example.com",
                            FirstName = "Sita",
                            LastName = "Maharjan",
                            MiddleName = "",
                            PasswordHash = "hashedPassword2",
                            PhoneNumber = "9800000001",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Pokhara",
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9905)),
                            Email = "kiran@example.com",
                            FirstName = "Kiran",
                            LastName = "Gurung",
                            MiddleName = "Kumar",
                            PasswordHash = "hashedPassword3",
                            PhoneNumber = "9800000002",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Kathmandu",
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9906)),
                            Email = "anil@example.com",
                            FirstName = "Anil",
                            LastName = "Shrestha",
                            MiddleName = "",
                            PasswordHash = "hashedPassword4",
                            PhoneNumber = "9800000003",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Biratnagar",
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9907)),
                            Email = "meena@example.com",
                            FirstName = "Meena",
                            LastName = "Tharu",
                            MiddleName = "Devi",
                            PasswordHash = "hashedPassword5",
                            PhoneNumber = "9800000004",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Dharan",
                            CreatedDate = new DateOnly(2025, 5, 14),
                            CreatedTime = new TimeOnly(8, 43, 42, 78).Add(TimeSpan.FromTicks(9909)),
                            Email = "hari@example.com",
                            FirstName = "Hari",
                            LastName = "Rai",
                            MiddleName = "",
                            PasswordHash = "hashedPassword6",
                            PhoneNumber = "9800000005",
                            Status = "InActive"
                        });
                });

            modelBuilder.Entity("PMS.Core.CustomerFeatures.CustomerEntity", b =>
                {
                    b.HasOne("PMS.Core.OderFeatures.OrderEntity", "Order")
                        .WithOne("CustomerEntity")
                        .HasForeignKey("PMS.Core.CustomerFeatures.CustomerEntity", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.UserFeatures.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS.Core.OrderItemFeatures.OrderItemEntity", b =>
                {
                    b.HasOne("PMS.Core.OderFeatures.OrderEntity", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.ProductFeatures.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PMS.Core.ProductFeatures.ProductEntity", b =>
                {
                    b.HasOne("PMS.Core.CategoryFeatures.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PMS.Core.OderFeatures.OrderEntity", b =>
                {
                    b.Navigation("CustomerEntity")
                        .IsRequired();

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
