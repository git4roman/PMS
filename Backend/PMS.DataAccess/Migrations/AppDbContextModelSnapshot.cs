// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PMS.DataAccess.Data;

#nullable disable

namespace PMS.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PMS.Core.CategoryFeatures.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_name");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Seeds and plants for agriculture and gardening.",
                            Guid = new Guid("8316e7bd-e19b-4139-9e73-a21c08c18bfa"),
                            ImageUrl = "images/categories/crops.jpg",
                            Name = "Crops"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Essential tools for planting, digging, and maintaining your garden.",
                            Guid = new Guid("6827cfa0-808d-4021-8eab-6dceb4a95131"),
                            ImageUrl = "images/categories/tools.jpg",
                            Name = "Tools"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Fertilizers, pesticides, and insecticides for healthy plant growth.",
                            Guid = new Guid("c0ae1c90-6064-4f06-ae24-691a35ce1a8b"),
                            ImageUrl = "images/categories/chemicals.jpg",
                            Name = "Chemicals"
                        });
                });

            modelBuilder.Entity("PMS.Core.CustomerFeatures.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("CustomerEntity");
                });

            modelBuilder.Entity("PMS.Core.DommyTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DommyTables");
                });

            modelBuilder.Entity("PMS.Core.OderFeatures.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DelieveryAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(21, 59, 58, 932).Add(TimeSpan.FromTicks(6673)),
                            CustomerId = 101,
                            DelieveryAddress = "123 Maple Street, Springfield",
                            Description = "Grocery order for weekly supplies",
                            Guid = new Guid("0a58b9d9-c533-4230-b072-1e4bd998bf07"),
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(21, 59, 58, 932).Add(TimeSpan.FromTicks(6676)),
                            CustomerId = 102,
                            DelieveryAddress = "456 Oak Avenue, Rivertown",
                            Description = "Electronics purchase",
                            Guid = new Guid("532edb53-8a9c-49e8-aa17-8b55157a4bf7"),
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(21, 59, 58, 932).Add(TimeSpan.FromTicks(6677)),
                            CustomerId = 103,
                            DelieveryAddress = "789 Pine Road, Hillview",
                            Description = "Clothing order for summer collection",
                            Guid = new Guid("2eef5ecf-84d7-4831-82ee-a3bfba735e3e"),
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(21, 59, 58, 932).Add(TimeSpan.FromTicks(6679)),
                            CustomerId = 104,
                            DelieveryAddress = "321 Cedar Lane, Lakeside",
                            Description = "Furniture delivery",
                            Guid = new Guid("773c2d0e-1847-48ae-8fa3-3219af6e10f5"),
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(21, 59, 58, 932).Add(TimeSpan.FromTicks(6683)),
                            CustomerId = 105,
                            DelieveryAddress = "654 Birch Street, Sunnyvale",
                            Description = "Cancelled book order",
                            Guid = new Guid("4fbfb74f-5438-42f0-8bad-08236aa6edac"),
                            OrderStatus = "Pending"
                        });
                });

            modelBuilder.Entity("PMS.Core.OrderItemFeatures.OrderItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItemEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Two packets of tomato seeds",
                            Guid = new Guid("d7179ac9-3db4-46bf-b70e-9e48d9b083c5"),
                            Name = "Tomato Seeds x2",
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 2,
                            ShippingCharge = 1.00m,
                            TotalPrice = 7.00m,
                            UnitPrice = 3.00m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Garden hand tool",
                            Guid = new Guid("04137a51-67f4-46e1-af2e-c613cbdda7ca"),
                            Name = "Hand Trowel",
                            OrderId = 1,
                            ProductId = 4,
                            Quantity = 1,
                            ShippingCharge = 1.00m,
                            TotalPrice = 8.00m,
                            UnitPrice = 7.00m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Organic pesticide",
                            Guid = new Guid("dedbe540-ddd8-40fd-91f6-356cd77eb9e6"),
                            Name = "Neem Oil Bottle",
                            OrderId = 2,
                            ProductId = 7,
                            Quantity = 1,
                            ShippingCharge = 1.00m,
                            TotalPrice = 9.00m,
                            UnitPrice = 8.00m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Set of 3 spinach plants",
                            Guid = new Guid("a5659af8-0086-4793-95e7-6868fbf3c9fe"),
                            Name = "Spinach Plant x3",
                            OrderId = 3,
                            ProductId = 2,
                            Quantity = 3,
                            ShippingCharge = 1.00m,
                            TotalPrice = 16.00m,
                            UnitPrice = 5.00m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateOnly(1, 1, 1),
                            CreatedTime = new TimeOnly(0, 0, 0),
                            Description = "Sharp pruning shears",
                            Guid = new Guid("cabf44b7-a7bb-49d5-8b21-f1596773d679"),
                            Name = "Pruning Shears",
                            OrderId = 4,
                            ProductId = 5,
                            Quantity = 1,
                            ShippingCharge = 1.00m,
                            TotalPrice = 11.00m,
                            UnitPrice = 10.00m
                        });
                });

            modelBuilder.Entity("PMS.Core.ProductFeatures.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<TimeSpan>("CreatedTime")
                        .HasColumnType("time")
                        .HasColumnName("created_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("product_name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.Property<TimeSpan>("UpdatedTime")
                        .HasColumnType("time")
                        .HasColumnName("updated_time");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(791989326582),
                            Description = "High-yield tomato seeds suitable for home and farm use.",
                            Guid = new Guid("d7347304-3d48-4afb-a5c9-c283cc945f69"),
                            ImageUrl = "images/products/tomato_seeds.jpg",
                            Name = "Tomato Seeds",
                            Price = 299m,
                            Quantity = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(791989326590),
                            Description = "Nutritious leafy vegetable ready for home garden transplant.",
                            Guid = new Guid("56c70192-dfcc-4fdb-ad21-c7ebafe74137"),
                            ImageUrl = "images/products/spinach_plant.jpg",
                            Name = "Spinach Plant",
                            Price = 499m,
                            Quantity = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(791989326592),
                            Description = "Spicy chili seeds ideal for warm climates.",
                            Guid = new Guid("41e4172b-8c92-4010-9230-e032c656bef5"),
                            ImageUrl = "images/products/chili_seeds.jpg",
                            Name = "Chili Seeds",
                            Price = 349m,
                            Quantity = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(791989326594),
                            Description = "Durable tool for digging and planting small plants.",
                            Guid = new Guid("2408f3bf-b4cc-4701-9600-da6f47d121c4"),
                            ImageUrl = "images/products/hand_trowel.jpg",
                            Name = "Hand Trowel",
                            Price = 999m,
                            Quantity = 7,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(791989326595),
                            Description = "Sharp blade tool for trimming plants and bushes.",
                            Guid = new Guid("6e3807cf-b043-4df2-bdad-e2b579a9cb24"),
                            ImageUrl = "images/products/pruning_shears.jpg",
                            Name = "Pruning Shears",
                            Price = 1499m,
                            Quantity = 10,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(791989326599),
                            Description = "Lightweight watering can with long spout for even watering.",
                            Guid = new Guid("4c489f67-07e1-45d2-a16c-50891866dd1b"),
                            ImageUrl = "images/products/watering_can.jpg",
                            Name = "Watering Can",
                            Price = 1999m,
                            Quantity = 12,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(791989326601),
                            Description = "Organic pesticide for controlling aphids and mealybugs.",
                            Guid = new Guid("d9cf191c-41bd-4329-ba3b-ff86ebe75772"),
                            ImageUrl = "images/products/neem_oil.jpg",
                            Name = "Pesticide - Neem Oil",
                            Price = 1299m,
                            Quantity = 8,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(791989326602),
                            Description = "Fast-acting insecticide for outdoor crops.",
                            Guid = new Guid("6d0c496f-3681-4c8b-b427-ab17b214a7ce"),
                            ImageUrl = "images/products/cypermethrin.jpg",
                            Name = "Insecticide - Cypermethrin",
                            Price = 1599m,
                            Quantity = 10,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedTime = new TimeSpan(791989326604),
                            Description = "Balanced fertilizer to promote plant growth.",
                            Guid = new Guid("6b80746d-6e83-48ab-a83d-6f2a43b8a898"),
                            ImageUrl = "images/products/npk_fertilizer.jpg",
                            Name = "Fertilizer - NPK 20:20:20",
                            Price = 1099m,
                            Quantity = 15,
                            Status = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("PMS.Core.UserFeatures.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedTime")
                        .HasColumnType("time");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Butwal",
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(21, 59, 58, 932).Add(TimeSpan.FromTicks(6639)),
                            Email = "admin@admin.com",
                            FirstName = "Ram",
                            LastName = "Thapa",
                            MiddleName = "Bahadur",
                            PasswordHash = "hashedPassword1",
                            PhoneNumber = "9800000000",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Lalitpur",
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(21, 59, 58, 932).Add(TimeSpan.FromTicks(6641)),
                            Email = "sita@example.com",
                            FirstName = "Sita",
                            LastName = "Maharjan",
                            MiddleName = "",
                            PasswordHash = "hashedPassword2",
                            PhoneNumber = "9800000001",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Pokhara",
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(21, 59, 58, 932).Add(TimeSpan.FromTicks(6642)),
                            Email = "kiran@example.com",
                            FirstName = "Kiran",
                            LastName = "Gurung",
                            MiddleName = "Kumar",
                            PasswordHash = "hashedPassword3",
                            PhoneNumber = "9800000002",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Kathmandu",
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(21, 59, 58, 932).Add(TimeSpan.FromTicks(6643)),
                            Email = "anil@example.com",
                            FirstName = "Anil",
                            LastName = "Shrestha",
                            MiddleName = "",
                            PasswordHash = "hashedPassword4",
                            PhoneNumber = "9800000003",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Biratnagar",
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(21, 59, 58, 932).Add(TimeSpan.FromTicks(6645)),
                            Email = "meena@example.com",
                            FirstName = "Meena",
                            LastName = "Tharu",
                            MiddleName = "Devi",
                            PasswordHash = "hashedPassword5",
                            PhoneNumber = "9800000004",
                            Status = "InActive"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Dharan",
                            CreatedDate = new DateOnly(2025, 5, 15),
                            CreatedTime = new TimeOnly(21, 59, 58, 932).Add(TimeSpan.FromTicks(6646)),
                            Email = "hari@example.com",
                            FirstName = "Hari",
                            LastName = "Rai",
                            MiddleName = "",
                            PasswordHash = "hashedPassword6",
                            PhoneNumber = "9800000005",
                            Status = "InActive"
                        });
                });

            modelBuilder.Entity("PMS.Core.CustomerFeatures.CustomerEntity", b =>
                {
                    b.HasOne("PMS.Core.OderFeatures.OrderEntity", "Order")
                        .WithOne("CustomerEntity")
                        .HasForeignKey("PMS.Core.CustomerFeatures.CustomerEntity", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.UserFeatures.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS.Core.OrderItemFeatures.OrderItemEntity", b =>
                {
                    b.HasOne("PMS.Core.OderFeatures.OrderEntity", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Core.ProductFeatures.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PMS.Core.ProductFeatures.ProductEntity", b =>
                {
                    b.HasOne("PMS.Core.CategoryFeatures.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PMS.Core.CategoryFeatures.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PMS.Core.OderFeatures.OrderEntity", b =>
                {
                    b.Navigation("CustomerEntity")
                        .IsRequired();

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
